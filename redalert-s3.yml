---
AWSTemplateFormatVersion: '2010-09-09'
Description: Redalert Stack
Parameters:
  VPCParameter:
    Description: VPC to launch instances into
    Type: AWS::EC2::VPC::Id
  SubnetsParameter:
    Description: Subnets to launch instances into
    Type: List<AWS::EC2::Subnet::Id>
  RedalertConfigS3Bucket:
    Description: S3 Config (s3://[RedalertConfigS3Bucket]/[RedalertConfigS3Location])
    Type: String
    Default: redalert-test-bucket
  RedalertConfigS3Location:
    Description: S3 Config (s3://[RedalertConfigS3Bucket]/[RedalertConfigS3Location])
    Type: String
    Default: uploaded_config.json
  RedalertVersion:
    Description: Redalert Version
    Type: String
    Default: "0.2.3"
  ConfigureDns:
    Description: Toggle configuring DNS
    Type: String
    Default: 'false'
    AllowedValues:
    - 'true'
    - 'false'
  R53HostedZoneName:
    Description: "(Optional Configure DNS) Hosted DNS Name."
    Type: String
    Default: randomdomain.com
Mappings:
  RegionMap:
    eu-west-1:
      AMI: ami-bff32ccc
    ap-southeast-1:
      AMI: ami-c9b572aa
    ap-southeast-2:
      AMI: ami-48d38c2b
    eu-central-1:
      AMI: ami-bc5b48d0
    ap-northeast-2:
      AMI: ami-249b554a
    ap-northeast-1:
      AMI: ami-383c1956
    us-east-1:
      AMI: ami-60b6c60a
    sa-east-1:
      AMI: ami-6817af04
    us-west-1:
      AMI: ami-d5ea86b5
    us-west-2:
      AMI: ami-f0091d91
Conditions:
  ConfigureRoute53:
    Fn::Equals:
    - Ref: ConfigureDns
    - 'true'
Resources:
  S3AccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  S3RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: s3access
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${RedalertConfigS3Bucket}/*'
      Roles:
        - !Ref 'S3AccessRole'
  S3InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'S3AccessRole'
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: elb-sg
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      VpcId:
        Ref: VPCParameter
  ELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 30
      CrossZone: true
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '10'
        Target: HTTP:80/
        Timeout: '5'
        UnhealthyThreshold: '2'
      Listeners:
      - InstancePort: '80'
        InstanceProtocol: HTTP
        LoadBalancerPort: '80'
        Protocol: HTTP
      Scheme: internet-facing
      SecurityGroups:
      - !Ref ELBSecurityGroup
      Subnets: !Ref SubnetsParameter
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ec2-sg
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      - FromPort: 80
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref ELBSecurityGroup
        ToPort: 80
      VpcId: !Ref VPCParameter
  ElbDnsCname:
    Condition: ConfigureRoute53
    Type: AWS::Route53::RecordSet
    DependsOn: ELB
    Properties:
      HostedZoneName:
        Fn::Join:
        - ''
        - - Ref: R53HostedZoneName
          - "."
      Comment: CNAME Redirect to the ELB
      Name:
        Fn::Join:
        - ''
        - - Ref: AWS::StackName
          - "."
          - Ref: R53HostedZoneName
          - "."
      Type: CNAME
      TTL: '300'
      ResourceRecords:
      - Fn::GetAtt:
        - ELB
        - DNSName
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: t2.micro
      IamInstanceProfile: !Ref S3InstanceProfile
      SecurityGroups:
      - !Ref EC2SecurityGroup
      UserData:
        'Fn::Base64': !Sub |
            #!/bin/bash -ex
            yum -y install wget
            wget https://github.com/jonog/redalert/releases/download/v${RedalertVersion}/redalert_${RedalertVersion}_linux_amd64.tar.gz
            tar -xvf redalert_${RedalertVersion}_linux_amd64.tar.gz
            export AWS_REGION=${AWS::Region}
            nohup ./redalert -p 80 --config-s3=s3://${RedalertConfigS3Bucket}/${RedalertConfigS3Location} server &
            /opt/aws/bin/cfn-signal -e 0 --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: '1'
      MaxSize: '2'
      DesiredCapacity: '1'
      LaunchConfigurationName: !Ref LaunchConfiguration
      VPCZoneIdentifier: !Ref SubnetsParameter
      LoadBalancerNames:
      - !Ref ELB
      HealthCheckGracePeriod: 60
      HealthCheckType: ELB
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '2'
        MinInstancesInService: '1'
        PauseTime: PT10M
        SuspendProcesses:
        - AlarmNotification
        WaitOnResourceSignals: true
Outputs:
  RedalertWebURL:
    Value: 
      Fn::Join:
        - ''
        - - 'http://'
          - !Ref ElbDnsCname
    Description: Redalert Web URL
